import {
  BrowserWindow,
  BrowserWindowConstructorOptions,
  app,
  desktopCapturer,
} from "electron";
import { pyloadEventTypes, pyloadEvents } from "./natives/pyloadHandle";
import { registerMenus, registerWebRequest } from "./natives/browserWindow";

import { nodeApi } from "./natives/nodeApi";
import { registerPyloadEvents } from "./natives/pyloadHandle";
import { resolve } from "path";

/* eslint-disable @typescript-eslint/no-var-requires */

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// 防止多开
const isFirstInstance = app.requestSingleInstanceLock();
if (!isFirstInstance) {
  app.quit();
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

// 窗口配置
const BrowserWindowOptions: BrowserWindowConstructorOptions = {
  width: 1600,
  height: 900,
  x: 0,
  y: 0,
  webPreferences: {
    contextIsolation: true,
    preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    nodeIntegrationInWorker: true,
    nodeIntegrationInSubFrames: true,
    nodeIntegration: true,
    plugins: true,
  },
  show: false,

  // 题栏的样式
  // titleBarStyle:"hidden",

  // 全屏
  // fullscreen:true,
  // simpleFullscreen:true,
  // fullscreenable:true,

  // 去边框
  // frame: false,

  icon: resolve(__dirname, "./resources/favicon.ico"),
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow(BrowserWindowOptions);

  /**
   * 加载插件
   */
  mainWindow.webContents.session.loadExtension(
    resolve("./resources/react-devtools/4.24.7_0")
  );

  mainWindow.webContents.session.loadExtension(
    resolve("./resources/vue-devtools/6.1.4_0")
  );

  mainWindow.setFullScreen(true);
  // 自定义导航栏
  registerMenus(mainWindow);
  // 自定义网络请求
  registerWebRequest(mainWindow);
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY).then(() => {
    const api = nodeApi(mainWindow);
    /**
     * 自动注册事件
     */
    for (const i in pyloadEvents) {
      registerPyloadEvents(
        i as pyloadEventTypes,
        { mainWindow, api },
        pyloadEvents[i as pyloadEventTypes]
      );
    }
  });
  mainWindow.on("ready-to-show", () => {
    mainWindow.show();
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
